%{
	#include "hw3_output.hpp"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;

	extern int yylex();
    extern int yylineno;
	int yyerror(const char * message);
    #define YYDEBUG 1
%}

%token tkvoid
%token tkint
%token tkbyte
%token tkbool
%token tkb


%token tktrue
%token tkfalse
%token tkreturn

%token tkbreak
%token tkcontinue
%token tksc
%token tkcomma

%token tklbrace
%token tkrbrace
%token tkif
%token tkwhile

%token tkid
%token tknumber
%token tksrting

%left tkassign
%left tkor
%left tkand
%left tkequality
%nonassoc tkorder
%left tkarithmetic
%left tkproduct
%right tknot
%left tklp
%left tkrp
%nonassoc then
%nonassoc tkelse

%%

Program	:	Funcs
		{
           ;
		}
	;

Funcs	:   /* empty */ {}
    | FuncDecl Funcs {}
	;
FuncDecl :  RetType tkid tklp Formals tkrp tklbrace Statements tkrbrace {}
RetType :   Type{}
RetType :   tkvoid{}
Formals	:   /* empty */ {}
	|	FormalsList {}
	;
FormalsList :   FormalDecl {} 
    |   FormalDecl tkcomma FormalsList {}
    ;
FormalDecl : Type tkid {}
Statements : Statement {}
        |   Statements Statement{}
        ;
Exp : tklp Exp tkrp {}
    | Exp tkarithmetic Exp {}
    | Exp tkproduct Exp {}
    | tkid {}
    | Call {}
    | tknumber {}
    | tknumber tkb {} 
    | tksrting {}
    | tktrue {} 
    | tkfalse {}
    | tknot Exp {}
    | Exp tkand Exp {}
    | Exp tkor Exp {}
    | Exp tkequality Exp {}
    | Exp tkorder Exp {}
    ;
Statement : tklbrace Statements tkrbrace {}
    | Type tkid tksc {} 
    | Type tkid tkassign Exp tksc {} 
    | tkid tkassign Exp tksc {} 
    | Call tksc {}
    | tkreturn tksc{}
    | tkreturn Exp tksc{}
    | tkif tklp Exp tkrp Statement {} %prec then
    | tkif tklp Exp tkrp Statement tkelse Statement {}
    | tkwhile tklp Exp tkrp Statement {} %prec then
    | tkwhile tklp Exp tkrp Statement tkelse Statement {}
    | tkbreak tksc{}
    | tkcontinue tksc{}
    ;
Call : tkid tklp ExpList tkrp {}
    | tkid tklp tkrp {}
    ;
ExpList : Exp{}
    | Exp tkcomma ExpList {}
    ;
Type : tkint {}
    | tkbyte {}
    | tkbool {}
    ;

%%

int main()
{
    //yydebug = 1; 
	yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}